// Code generated by go-bindata.
// sources:
// lispboot/boot.lisp
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lispbootBootLisp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\xdd\x72\xa3\xc6\xf2\xbf\xf7\x53\x74\xe4\xda\xf2\x8c\x57\x76\x84\x90\xb4\xc9\x3f\x96\x36\xef\xf0\xbf\x74\xb9\x1c\x24\xc0\xab\x32\x02\x2d\x20\x07\xe7\xe9\x4f\x75\xf7\x7c\xf4\x00\x92\x7d\xaa\x72\x71\xb6\xb6\x2c\x98\xfe\x6e\x7e\xd3\x33\xd3\xa0\xd2\x2c\x87\x5d\x55\x36\xa0\xb6\xa7\x7d\xd1\xee\x4b\xba\xd3\xfa\xea\x8f\x5f\x60\x03\x8a\x48\x11\xdd\xe5\xc9\xbe\x08\x46\x61\x4e\xe3\x2a\x82\x7b\x73\x29\x48\x10\x7b\xa1\x2b\xb2\x52\xec\x9b\x16\x54\x7e\x2a\xa1\x6b\xa0\x43\x13\x3c\x9e\x66\x38\xa6\x0e\xc9\xae\xae\x40\x35\xef\x07\xb8\x87\x6d\x95\xbe\x6b\x50\x24\x72\x83\x4c\x38\xcc\xba\x6f\x90\x9b\xe8\x5a\x6b\xa7\xc1\x48\x7f\x5a\x09\x33\x0e\xd4\xd8\x1c\x84\x8a\xf6\x65\x9b\x0f\x15\xf1\xad\x95\x68\xde\x0f\xa4\x89\xb3\xc0\x31\x3d\xe7\xa0\x12\xd8\x6a\xd8\x72\xa2\x2c\xf5\x39\x87\x18\x96\x74\xb7\xf4\x02\x6c\xf2\xf9\x80\x32\xf7\x63\x52\x07\x88\x50\xa5\x4d\x6d\xcc\xf9\xb3\x0e\x64\xdd\xbe\x05\x85\x7f\x77\x55\x9a\x99\x98\x1c\xb1\xae\xab\x1a\xd4\xa1\x79\xb1\x69\xb7\x94\x97\xac\xa4\x68\xfa\xe3\xbb\xa4\xe6\x5c\xf5\x34\xed\x52\x3f\x6e\x9e\xb8\xe5\x84\x68\x0e\xf1\x82\xc7\xa3\xb9\xa5\xa6\x23\xd4\x78\x11\x1a\x4b\x8e\xc7\xe2\x1d\x54\x0e\x49\xfd\xe2\x15\xf3\x28\x83\x93\x92\x2d\x34\xa8\x68\x0e\xf7\x78\xc7\x8a\x4e\x08\xdb\xc3\xb1\x6a\x32\xd4\xf2\xa2\xaf\x80\x91\xa6\x3a\x8d\x03\xea\x05\x3a\xf1\x74\x94\xe5\x45\xd7\x77\x69\xad\xa5\x7e\x58\xae\x42\x27\x4f\x25\xe4\xc5\xfe\x08\x2a\xf7\x6a\xe9\xa9\xaa\x1c\xb6\x90\x08\xb5\x86\xcd\x31\x24\x5a\x1b\x9f\xa5\x3e\xd8\x25\x9c\x31\xe1\x43\x52\x5b\x10\xee\x92\xb4\x4f\x4c\x3d\x31\x0d\x24\xd3\x50\x32\x4d\xfb\x44\x21\x99\x8c\x18\x95\xb2\xc9\x50\x73\xe0\xd4\x40\x3a\x0d\x2c\x0f\xa4\x25\x39\x19\xc6\x94\x04\x41\x0d\x1c\x97\xe4\x24\x1d\x66\x44\x4a\x8f\x84\x4d\xe4\x00\x61\xe5\xe9\xf0\x1d\xd1\x10\x82\xb9\x79\x1f\x1d\x6d\xeb\x91\x51\xc4\xe1\xc8\x70\xb9\x2f\x46\x46\xb7\x55\x35\x36\x7c\xac\xab\xdd\xc8\xf0\x21\x6b\x13\x33\xcc\x48\x22\x6f\xa3\x39\xcf\xf3\xeb\x36\x1c\xb5\x78\x12\xf5\x98\x28\x93\xbc\xaa\x26\x2c\x91\x9b\x71\x8a\xef\x26\xaf\xaa\x50\x11\x05\x28\xd8\x5b\x51\xbb\xbf\xdb\xb9\x40\x75\xa6\xe7\x00\xc5\xda\x1b\xe4\xb2\xce\x01\x5f\xb7\xda\x5e\x2a\x33\x2f\xd4\x75\x0b\xd7\xb9\x0e\x98\x4d\x1a\x68\xa2\x68\xad\xed\x00\x55\x15\x47\x35\x15\x58\xd0\xd3\x2c\x17\x3a\x51\xed\x40\xb3\xc9\xa4\xd7\xcc\x03\x46\xb3\xa1\x4a\xcd\x3c\x24\x34\xe7\xa4\x16\xf5\xfb\xd2\x82\xba\xe9\xf9\xe0\xfc\xdf\xe7\x26\x11\x74\x0b\x98\x08\xfc\xa1\x71\x4e\xa0\x21\x00\x3b\xf5\x9d\x6b\x20\x3e\x5c\x1e\xbd\xce\x7d\xc9\x30\x0c\x23\x29\xfd\x0e\x37\xae\xc6\x85\x0f\x55\x50\xe3\x05\xdc\xbb\x7a\x75\x86\xc1\x91\xdb\x70\x46\x7c\xc5\x39\xd1\x84\x40\xbc\x23\x28\xc1\x3d\x93\x42\xda\xed\x08\xff\xaf\x17\xf8\xbf\xf4\x68\xf2\x31\x7d\xd5\xa0\xbe\x42\x14\xd1\x4f\x0c\x0b\x58\x9a\xf4\xcf\x20\x8a\x20\x9a\x87\xdc\x77\xb0\xd4\xf4\x17\xe6\x86\xed\x6e\x69\xd6\x40\xc7\x73\xab\x41\xdd\xb2\xc6\xdb\x40\x63\x84\x1a\x57\xb3\x90\xfb\x57\x98\x6b\xfa\x3b\x13\x4a\x67\xf7\x4b\xe8\x59\xfe\x42\x96\xbf\xc0\xd2\x4e\x05\x45\x2c\xfd\xba\xb0\x4b\x5a\x2c\x1a\xbd\xe4\x14\x59\xf9\xd2\xfe\xa0\xd9\xa6\x35\xfc\x01\xdb\xf7\x36\x83\x66\xff\x4f\xe6\x67\xdb\x2e\x69\x49\xed\x64\x12\x8c\xf1\xdc\x84\xc9\x36\xa9\xe9\xef\x3f\x3c\x4f\x71\x74\x9b\xd4\x78\x6f\xbd\x64\x13\x86\xc0\x5c\xab\x71\x9a\xd0\xe3\xf7\x64\xd6\xd5\x35\xee\xc7\x82\xc8\xd7\x1a\xd4\x1a\x22\xfe\xeb\x7e\xe7\xf6\xde\x53\x5c\xfa\xcc\x9c\x6c\xed\xfc\xe9\xcd\xcc\xb5\x0d\x8a\xca\x8e\xb8\x27\xc7\xcf\x96\x8a\xb5\x99\x8b\x74\x45\xf3\xdd\x8e\xf5\x6b\x41\x5f\x4e\x69\x9c\x57\x78\x75\xa3\xc8\x73\xfe\xe9\x8f\xc4\x62\x04\x67\x9b\x16\x97\x82\x12\x8e\xf7\xab\x90\xb4\xbf\x76\xe5\xc7\xd7\xa1\xc1\xf4\xa4\xe4\xcd\x63\x98\x44\xf3\x58\x66\x83\x6a\xb5\xa8\x44\x3d\xac\x3d\xd0\x64\xba\xab\xea\xbb\x21\xdc\x36\x17\x68\x0f\xeb\x4b\x82\x7d\xa2\x74\xf3\x41\x83\x7a\xa0\xa7\xfd\x60\x9e\xff\x83\x59\x1a\xf8\x2a\x76\x57\x0b\x73\xe5\x7f\x17\x6e\xd6\x78\x6c\x98\xaa\x3d\x56\xbb\x37\x1a\xd4\x86\x4c\x6d\x8c\xa9\x8d\x33\xb5\x71\xa6\x36\xce\xd4\x46\xfc\x0e\x4c\xe5\xe2\xff\x10\x1d\x0f\x08\xef\x07\xc6\xf7\x83\x05\x36\x5f\xb0\xf7\x6b\x1f\xda\xda\xc7\xb6\x96\x17\x67\xa2\x6b\xcf\x45\x87\x26\x37\x6c\x72\x63\x4d\x6e\xbc\xc9\x8d\x37\xb9\xf1\x26\x37\x6b\x79\xf1\x51\x94\x6d\x2f\x4a\x98\x24\xdb\xdd\x04\x26\xbb\x64\x3b\xd1\xe2\x3e\xd9\xa6\xe6\x7e\x9b\xd0\xfd\x6e\x3b\x39\x33\x9b\x1e\x18\xa6\x8b\xe5\x6a\xd2\xdf\x74\x3c\x58\x36\x5f\x4f\x4e\x25\x1c\x12\xdc\x02\x53\x3d\x09\x16\xcb\x86\x97\x3f\x65\x7e\x78\x57\x9f\xf3\xe9\x01\x0f\x83\xb8\x2c\x1f\x21\x37\x8b\x65\xa3\xc5\x76\x9d\x55\xd2\xae\x9a\xca\x7b\xc2\x53\xd3\x6d\x53\x96\x60\x0f\x05\x31\xac\x20\x5a\xd2\x02\xe2\xb6\xee\x55\x91\x16\x68\x69\x7f\xd6\xa7\x3d\xbb\xc4\x9c\x39\xf3\x0a\xbf\xbc\x43\xc6\x1f\x66\xe4\x08\xac\x1f\x73\xb1\x46\x28\xa5\x34\x1d\x89\x71\x71\xd6\x54\x31\x02\x77\xea\xcf\xb9\xe3\x7c\x60\x8b\x35\xb0\x5f\x83\xf4\x30\xf1\xbc\x3b\x7c\xed\x3c\x48\x8e\xc7\xac\x4c\xa1\x68\xae\xc0\xca\xde\x9a\x31\xa5\xa1\x70\xe7\xf2\x53\xe9\xc7\xf1\x34\x13\xf8\x9a\xb0\xab\x5b\xf9\x30\xd1\x5b\x7a\x40\x56\x0a\x5d\x4d\xf0\x18\xab\xe5\x91\x8e\x48\x62\x8b\x69\x6e\x16\xb0\x84\x95\x5b\xb3\xe7\xbc\x86\xc3\xca\x3b\x53\x67\x6f\xa0\x0a\xce\x99\x7d\xa8\x78\xde\x32\x7b\x3b\xe3\x3a\x9b\x61\x5e\x6b\xc3\x6f\x06\x96\xb0\x80\x39\x44\x5e\x69\x59\xb5\x62\x5f\xd7\xf1\x44\x0a\x80\x47\x1c\xe6\x74\x18\xa3\x99\x60\xed\xf1\xb3\xcf\x76\x33\xb2\xa2\xc9\xfc\x2d\x6f\x35\x77\x55\x99\xc2\xb1\xce\xd2\x26\x48\x22\x8d\x84\xd3\x82\x7b\x0a\xb4\x95\xc4\x03\x99\xe0\x30\x3b\x4a\xee\x5e\x6c\xb3\x97\x7d\x89\x09\x76\x3c\x23\x4c\x64\x95\x1e\x82\x61\xd1\xb2\xab\x93\x86\xcd\x05\x62\x7e\xbc\xa6\x28\x9f\xcc\x09\x3e\x1e\xa1\xc1\x62\xb9\x62\xfa\x62\xb9\x1a\xd0\x9f\xe8\x67\xce\x3f\x56\x4f\xc8\x95\x8f\x73\xcd\x47\xb9\xf2\x1e\x57\x7c\x89\x2b\xb7\x5c\x4a\x74\x61\xe0\xb9\xb6\xdb\xeb\x20\x56\xbe\x04\x78\x54\x26\x97\x4d\xd6\xfe\x42\xcc\xa6\x81\xf5\x8c\x9b\x36\xda\x6e\x84\x94\x39\x51\x9e\x3e\x90\x8f\x8d\x7c\x3b\x90\x5f\x7c\x4a\x7e\x79\x56\x7e\xc5\xf2\x41\x44\xcf\x35\xdd\x2d\x20\x76\xd8\x66\xe0\x25\x65\x0a\x6f\x49\x71\xca\x08\x78\x14\x37\x90\x51\xc2\x1f\x53\xd0\xca\x93\x1c\x26\xc8\x18\x9a\xe6\x69\x6d\xee\x0c\x1b\x41\x5c\x71\x45\x6e\x0f\x47\x09\x3d\x87\x61\x83\x64\xe2\xa1\xcb\x21\xe3\x50\x08\x81\xdf\x1e\x8e\x16\xc0\x89\xc5\xaf\x73\x06\x95\x8c\x6a\x91\x5e\x86\x1c\x8a\x1b\x5c\x98\x32\x57\x84\x0c\xf8\xdd\x79\x0b\x0d\xd9\xd3\xb6\x87\xbd\x19\x45\xa0\xf7\x00\x8f\x94\xeb\xdc\x11\xdc\xce\x4e\x48\xc0\xb7\xdf\x7e\x27\xe2\xb7\xdf\x7e\xbf\x8c\xc6\xc4\x83\xf1\x22\x16\xad\x83\xe7\x19\x19\x9a\xce\xad\xf3\x8c\xb1\x43\xf7\x65\x3e\xc6\x2a\x85\x12\x04\x6a\xf0\x16\x8b\x5a\xca\x78\xab\xea\xcf\xc0\x2d\xff\x1f\x83\x9b\x80\x5c\x55\x87\xfe\xfc\x0b\x68\xab\xea\x10\x24\x55\x3d\x82\x35\x1e\x74\x8f\x2e\x20\x08\xa4\x79\x08\x7a\x01\x87\x34\x2f\x74\x06\x69\x55\xfd\x29\xa0\x7d\x08\x8b\xf9\x27\xf9\xe2\xcf\x02\x77\xe1\x81\x1b\x46\x32\x02\x34\xdc\xc1\x14\xc5\xa5\x2d\xa6\x6d\xc8\x50\xf9\x10\x3b\x4c\xff\x9c\x14\x6a\x18\xdd\x6a\x22\x81\x5b\x85\x88\x90\x5e\x5b\x26\x24\x8e\x76\xc8\x06\x2c\x93\xf9\xc4\x31\xe5\x3e\x82\xf2\xfd\x62\x04\x39\x47\x50\xd5\xe3\x01\x28\x94\x1f\xf7\xbf\x7c\x1f\xfa\x9f\x8f\x12\xc7\xfd\x0f\x59\x26\xd1\x04\xe6\x30\x89\x27\x1f\xb3\x61\xa0\x9e\x31\x97\x55\xe1\xe7\x29\x69\xf6\x3f\x4f\x55\x9b\x99\x5d\xe7\xed\xcf\x9f\x30\xe3\xb8\x0a\x9a\x41\x6e\xc3\xf9\xf3\x27\xa8\x3a\x29\x5f\xc1\xf7\xda\x82\x9e\x9a\x2f\x2a\x58\x3f\xd6\x26\x37\x1a\x6e\x4e\x25\x19\x70\x39\x22\xd1\x35\x90\xae\x99\x7c\xf4\xd4\x5f\xef\xe4\x08\xd7\x02\x59\x46\xd8\x57\xa7\x93\x1d\x56\x77\xac\x2d\xd2\x4e\x89\xd6\xa6\x46\xa1\x33\xbc\x5a\x71\x07\x95\xbd\xa2\x73\x3d\x6f\xe4\x84\x8b\x77\xcd\xb1\xd8\xef\xf6\xe5\x8b\xfe\xd8\x59\x76\xc7\xed\xa7\xa9\x0b\xdf\x19\x7f\x88\xdb\xb6\x16\x87\x42\xe2\xb5\xc9\x85\xd8\xbc\x33\xa3\x41\x72\x18\xa3\x06\x45\xe4\xe2\x31\xf8\x47\xed\x83\x3b\xeb\x83\x60\x36\xd6\xbf\x8e\xa4\xd8\xd9\xc1\x75\xe0\x6a\x34\x4a\xe1\x9d\x4d\xfc\xd0\xe1\xa7\x60\x8b\xcd\x2e\x74\x01\xf8\xb6\xfb\x32\x75\x6d\x5e\xf1\x38\x3d\x5a\xdc\xf3\x0d\x1a\xba\xe0\x16\xb2\xde\x30\xbf\x5e\x30\x3e\xe9\x60\xa5\x2c\xb2\x16\x14\x1a\x6c\xec\x8b\xca\xde\x92\x49\xb2\xc4\x60\xf5\xfd\xa5\xca\xe4\x90\xa5\x77\x28\x3a\x65\xd1\xe9\x9f\x24\x1a\xac\xa7\x3d\x19\x2e\xb8\x7d\x46\x3c\xd4\x88\x08\x59\x06\x94\x4d\x01\xba\xcc\x63\x1e\x5a\x8a\xdf\x21\x4e\xfe\xff\xbd\x6c\x93\x8e\xdf\x28\xfe\x1f\x64\xdd\x31\xdb\xb5\x19\x1e\xe9\x30\x22\x72\x11\x07\x6b\x7d\x7f\x7f\xaf\x29\x32\xbc\x98\xc8\xc5\xdc\xf9\xc6\x6b\xfa\x94\xa7\x88\xb1\xc7\x8a\xa6\x94\x62\xe3\x96\x71\xde\x63\x7c\x6a\xb0\x69\x44\x9e\x06\xa9\xad\xb3\xdd\x48\x76\x71\x96\x25\xf6\xf4\xe9\x83\xc6\x9a\x6d\x02\x37\x0a\x0d\x50\x30\xa0\xc7\xb7\xa4\x6e\x64\x0b\xa2\xd3\xf0\xd7\xe3\xd4\x02\x5e\xe9\x27\x6d\xa4\x9e\xc4\x3e\xe0\x71\x5f\xee\xdb\x81\x18\xaf\x7a\x4e\x76\xea\x31\x6e\x55\xf8\xc7\x46\x49\x20\xdb\xd3\x3f\x59\x59\x90\x85\x4f\x3c\x0c\xca\xc1\xf9\xe7\x11\xe6\xcc\x23\x8b\x5e\x79\xff\x3b\xa9\x4b\xea\x17\x93\x03\x8f\xa7\x7e\x88\x6c\xc9\xf9\xfb\x38\xa5\x97\xd1\x98\xb2\x29\x89\x5b\xe0\x6a\x50\x44\x9a\xfe\xc9\xaf\x88\x3f\x99\x07\x1f\x17\x25\xe2\x83\x7c\xd8\xc6\x39\x3a\xff\xdc\xd1\xa9\xf2\xf9\x1d\x4f\x95\xa0\x6e\xe1\xb9\x83\xe7\x77\x2d\x5b\xec\xcf\x5d\xaf\x23\x86\x92\xcf\x45\x55\x1d\x41\x3d\x76\x10\xcd\x9e\xe0\xb1\x39\x1d\x60\xf6\xe4\xf7\x3f\x98\xc8\x07\x98\x61\x4d\x31\x43\x00\xca\xc8\xdc\x41\x07\xfc\x4a\x04\xa5\xdc\xdb\x40\xfc\xd7\x9c\x0e\x7c\xbb\x34\x1f\x0c\x90\xc8\x88\x79\x34\x1c\x3f\xc1\x63\x87\x2e\x77\xb0\xd0\x7c\xfd\x15\x3a\x58\x62\x16\xd9\x6e\xf4\xcd\x8b\x70\xde\xb3\xb7\xac\xfc\x2e\xde\x99\xf3\x8a\xa4\xbe\x40\x07\x73\x0d\x33\x6a\x7b\xa8\x2a\xc5\xe2\xc0\x6e\x6a\x71\x88\xb5\xa8\x67\xfa\x05\x1d\x39\x28\x63\xc8\x2b\xf1\xb9\xe1\x25\x82\x19\x16\xda\x5e\x2d\xb5\x31\xbc\xb2\x17\xdf\x82\x57\x8b\x41\xfb\x85\xd1\xfc\xf7\x8f\xac\x34\x4d\x02\x8f\xe1\xbf\xd0\x9f\x29\x37\x45\x82\xa2\xe8\x3a\xf4\x1b\x50\x24\x79\x9d\x07\x9b\x71\x15\x12\xdb\xc1\xa1\x50\x58\x3e\x95\x45\xd6\x34\x17\x6d\xeb\x9e\x79\x67\xdb\xc8\xf6\xac\xfb\x2d\xbf\xa5\xb7\x7d\xef\xc2\xda\x17\x81\x7a\x4b\x6a\xc2\x78\xe0\x01\xa3\x03\x6b\x0a\x4c\x91\xf8\x24\x0a\xab\x03\x43\x04\x9d\x6d\xb2\x80\x1b\x30\x48\x12\x80\xb5\x04\x86\x95\x84\x41\x67\xe2\x89\xbe\xf5\x3f\x27\x29\x8a\x5f\x77\x3b\x42\xc7\xa0\x5c\x13\xe1\x35\xf0\x56\xf2\x83\x9a\xbe\x6a\x91\x2e\xe3\xee\x57\x88\xc8\x13\x64\xdb\x55\x65\x4b\x23\x33\xca\x7d\x0b\xd1\x6c\x66\xb7\xc5\xd1\x2c\xba\x2c\xc1\xbc\xc4\x1a\x45\xbd\xb9\x24\x26\x31\x3c\x92\xcc\x75\x2e\x21\xcb\xca\x5e\xcd\x89\x86\x18\x5e\xfd\xc4\x65\xc8\x0c\x27\x3c\x31\xa3\xd6\xb1\xb9\xce\xd4\xce\xcd\x11\x41\x41\xfd\x7e\x00\x8b\x82\xa9\x09\x22\x9f\xcd\x8f\x7d\xde\xf6\xd3\x79\x6b\x46\xc7\xb2\xe9\x45\xeb\xac\xc9\x5a\x92\x62\x21\xbe\x37\x6f\xb1\xfa\x22\x70\x6b\xd2\x21\xfb\xc5\xdb\xaa\x6e\x41\xb5\x3f\x4e\xe5\x2b\xad\x1b\x04\x94\x37\x31\x82\xbb\x7f\x92\x7b\x0b\xb6\x5e\xc6\x52\x4f\x90\x18\x89\xdd\x2d\x2b\x94\x6d\xbb\x23\xa1\x44\xb1\x3a\x76\xf2\x6d\xfc\xcc\x2f\x19\x29\x85\xe3\x5c\xaf\xec\x94\xb9\x33\xc1\xb0\x4b\x81\xb3\x36\x97\xd6\x51\xef\x93\x15\x32\x29\xeb\x99\xc1\xb3\x1c\x12\xde\x9a\xd1\xa6\x82\xc9\x01\x7f\xf5\xf4\x0a\x6f\x7c\xb0\x13\x80\x27\x06\x07\x2d\xf6\xe2\xd5\xf5\xd4\x6f\x14\xae\x1d\xaf\x5a\xa0\x6f\xc8\x32\xff\x98\x25\xee\xb1\xdc\x28\xd9\x95\xef\xbd\x90\xcc\xde\x92\x02\x94\x6f\xbc\xd3\xfd\x0d\x4d\xb4\xb9\x7c\x59\x75\x0f\x2b\xd7\x7d\x4d\x6a\xc7\x47\xeb\xb5\x0e\xcf\x8c\xee\xa3\x18\x84\x64\xd6\x1d\x69\xdb\xd1\xff\xb8\x40\x10\xef\x22\xe9\x80\x94\xb2\x8d\x07\x76\xc0\xb7\x21\xf8\x9b\x34\xc9\x79\xe3\xde\xce\x54\xa0\x3a\x78\xd7\x5c\xda\xde\x6d\x09\x21\xbc\x13\x91\x17\xb7\x80\x43\x36\x5d\x9a\xd7\xfd\xd1\x7d\x60\xe2\x3e\xe3\xeb\xb5\x9f\x87\xd6\x59\x2e\x9a\x1b\x05\xf1\x82\x3f\x96\xa4\xe6\x8e\x75\x41\x8c\x9c\x51\x74\x17\x7d\x52\xd5\x18\xe9\xbc\x73\xf6\xd3\xb8\x51\xb1\xc0\x3b\x64\x92\xb4\x4b\x7e\xfe\x77\x5a\x47\x99\x24\xa0\x46\xf2\x29\x70\xf5\x87\xfd\x77\xd5\xfb\x1c\x6b\x5f\x8e\x7d\xb9\x51\x66\x7f\x17\xfb\x32\xf3\x1f\x45\x9e\x0c\x6f\x41\x1f\x87\x51\x0f\x83\xa7\xa9\xd4\x80\xe7\x40\x16\xec\x7f\x7c\xb6\x2f\x1b\xdc\x90\xf2\x17\x5e\x4e\x21\x74\x03\x45\xb4\x59\xb6\xdc\xa6\xe5\xd3\x57\x4a\x9f\x3a\x9e\x90\xd9\xb4\x8f\x70\xa9\xb2\x9b\xce\x06\xba\x06\x17\x2a\xda\x73\x02\x8c\x35\x97\x00\x76\xee\xf3\x24\x92\x32\x5d\x24\x04\xf4\x8e\xf7\x64\xfe\x45\x09\xd9\x31\xdd\xa2\x58\xbe\xa3\x5b\xfa\x57\x68\xed\x0f\x50\xa5\xec\x65\xad\xa1\xb4\x6d\x0c\xdb\xbb\xe2\x1b\x62\xbd\x83\x92\x0f\xf8\xfd\xd7\xaa\x48\x8d\x8d\xb5\xdf\xe1\x37\xf8\x06\x2b\xfb\xe2\x6e\x75\xf5\x9f\x00\x00\x00\xff\xff\x4a\xaa\xb7\x71\xa8\x2c\x00\x00")

func lispbootBootLispBytes() ([]byte, error) {
	return bindataRead(
		_lispbootBootLisp,
		"lispboot/boot.lisp",
	)
}

func lispbootBootLisp() (*asset, error) {
	bytes, err := lispbootBootLispBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lispboot/boot.lisp", size: 11432, mode: os.FileMode(420), modTime: time.Unix(1488463181, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lispboot/boot.lisp": lispbootBootLisp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"lispboot": &bintree{nil, map[string]*bintree{
		"boot.lisp": &bintree{lispbootBootLisp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
