// Code generated by go-bindata.
// sources:
// lispboot/boot.lisp
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _lispbootBootLisp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xcd\x72\xdb\x36\x10\xbe\xfb\x29\xb6\xf1\x74\x0c\x38\x94\x13\x5f\x9b\xb8\xc9\x3b\xf4\xa8\xd1\x4c\x20\x12\x94\x39\xa2\x40\x9a\x00\x15\xaa\x4f\xdf\xd9\x5d\x80\x04\x48\x5a\xd1\x4c\x7b\xa8\x0f\xb6\xb9\x3f\x1f\xbe\x5d\x2c\x96\x4b\x88\x42\x97\x90\x37\xc6\x82\xd8\xf7\x55\xed\x2a\x43\x4f\x52\xde\x91\xa6\xae\xac\x03\x51\xf6\x06\x06\x0b\x03\x8a\x59\x5e\x68\x94\x89\x93\xca\xbb\x06\x84\xbd\x9c\xe0\x09\xf6\x4d\x71\x91\x20\xc8\xe5\x01\x8d\x50\x2c\x08\xfb\x01\xad\x49\x2f\x03\x72\xa1\x4b\xef\x7d\x33\x08\x1b\x2e\x60\x02\xef\x14\xa8\x32\xae\x5c\x02\xf1\x63\xf0\xb0\x97\x13\x21\x11\x54\x10\xea\xa1\x72\x20\xf0\x77\xde\x14\xda\xaf\x33\x2a\xbb\xae\xe9\x40\x9c\xec\x61\xee\x76\xd0\x86\x56\x98\xcb\x73\xd5\x31\xff\x19\x52\x5e\x4c\xf2\x44\xa1\xda\xb6\xbe\x80\x28\x41\x75\x87\x51\xd9\xe3\xb6\x9c\xda\xc6\x6a\xd4\x1c\xe4\x1d\xf0\xae\x88\x41\xa2\x40\x1c\x60\x98\x22\xe9\x0d\x94\x75\xd5\x82\x28\x27\x3b\x05\x7b\xb2\xdc\x83\x1a\xed\x20\x57\x4c\x8e\x81\x91\x69\xae\xba\x90\xd9\x5c\x15\x73\x65\x31\x29\x8b\xc4\xb3\x48\x3d\x8b\x62\xae\x8c\x3c\xd5\xca\xa2\xb1\xaf\x5a\x22\x27\xa4\x16\xde\x45\xb2\xf2\xc2\x3b\x56\xab\x65\x4c\x2a\x09\x6a\x41\x3c\x56\xab\x62\x99\x91\xd8\x7b\x25\x6c\x52\x27\xdb\x6b\xfa\xd3\x37\xdc\xb6\xb4\x1a\xec\x65\x55\xea\xba\x15\x29\x16\xcd\x8a\xd8\x54\xf5\x8a\x74\xdf\x34\x6b\xe2\xb6\x6b\xf2\x15\xf1\x49\x3b\xe5\xc5\xa1\x92\xf0\xc4\x90\x08\x4b\xa9\x2a\x41\xd0\x3a\xf4\x08\x70\xef\xe8\x0f\xc9\x99\x96\x57\x00\x1f\xb5\x6f\x20\x30\x0f\x88\xc7\xd2\xfb\x72\x71\xde\x3e\x62\x4a\x6c\xca\x63\x03\xc2\xf4\x78\x8a\x49\x95\xea\x1e\x57\xec\x3f\x5d\xb1\xff\x7d\xa6\x9b\xe7\x32\x57\x0e\x13\x3d\x43\xac\xb5\x39\xb8\x57\x10\xd6\x75\x52\xc2\x17\xd8\x5f\x9c\x06\x5b\xfd\xad\x53\xff\x17\x6c\x8a\x89\xe4\x2b\xad\xb3\x69\xba\xcd\x12\xf4\xcf\x2b\xba\xaf\x2f\xd7\x1c\xe7\xca\xb0\x3b\x27\x85\xc7\x9c\x48\x24\xdb\x63\x39\xe1\x0f\x82\xff\x72\x03\xc5\x46\x81\x55\x8b\x7d\x1c\xbb\x65\x0b\xa5\xdf\x1f\x2b\xd3\xee\xd1\xd4\x45\x8d\xe6\xd5\xbb\xc8\x15\xe3\xb2\x65\xc9\xb6\x11\xf8\x84\x9a\x80\x76\xb7\x81\x8e\x48\xbc\x40\x07\x8c\xbe\xc2\x54\xb5\xad\x36\x05\xd4\xf6\x0e\x82\xed\xa3\x97\x3d\x08\x09\x75\xdc\x40\x83\x82\x7a\x61\xb2\xbe\xe2\xe5\xf7\x71\xae\x90\x81\x92\x20\x46\x2f\x5c\x5e\x49\xd8\x27\xeb\x77\xfa\x0c\xa2\xe6\x70\x42\xd6\xb0\xf5\x52\x63\x5f\x52\x30\x8d\x8b\x8e\xd2\x00\xf7\x25\xdc\xbb\xb1\x1d\xeb\xda\x6a\x7c\xe6\x47\x7e\x9b\xe5\x8d\x29\xa0\xed\x74\x61\x13\xc6\x24\x99\xed\x31\xbf\xdb\xe8\x28\x62\x0f\x8d\x4c\xfc\x89\xe4\xb7\xe8\x5e\x1f\xf0\x65\x49\x1d\x9c\x6d\x56\x8c\x68\x59\x0a\xd9\x9b\x8c\x41\x33\x2d\x65\x0a\x38\xab\xba\xd7\x44\x0b\xad\x09\x63\xcb\xec\x58\x23\xe1\xde\xed\x62\x31\xe1\x79\x9d\xe4\x0c\xfb\x27\x6f\x46\x09\x10\xfc\xc2\x72\xa7\x36\xe6\x35\x06\xe8\xc3\x24\x1b\xfa\x77\x69\xb8\x74\xc2\xac\xb8\x53\x1b\xa2\x53\x21\xb8\x91\x0c\x82\xac\xa2\xc4\x2c\x53\x0b\xc1\x6f\x7c\x29\x77\x69\x6a\x9a\xee\x96\xcc\x94\xff\xb3\xcc\x44\xd9\xc1\x01\x27\xe6\xf3\xef\x13\x83\x07\xb5\xae\xaf\x35\xaa\xf0\x22\xa1\x9d\x89\xda\xd4\x84\x2b\x10\xe1\x9d\x7e\xa5\xcc\xe5\x2a\x78\xc9\xe0\x4d\xb7\x8e\x2d\xd0\x7f\x0d\x9a\x37\xf4\xad\x57\xb6\x7a\xeb\x1b\xa7\x7d\x9f\x79\x7c\x7b\x83\xcf\x8c\x53\xdb\x98\x07\x2a\x44\xa7\xcc\x11\xa6\xd7\x65\xf2\x5a\x9c\xea\x01\xb7\xfe\xc5\x73\x91\xf0\xd0\x1b\x5a\x60\xe4\x44\xae\x2f\x40\x58\x9f\xe3\x2c\xd0\x54\x36\xc4\x12\xde\xc6\xb8\x02\x98\xeb\x88\xc9\x84\xc5\x86\xd1\x9e\xe5\x08\x22\xa5\x2f\x2f\x24\xc3\x67\x82\x47\x0b\x66\x25\x81\x19\xa6\x14\x37\xb6\xad\xab\xbc\x32\x07\xf9\x6b\xb2\x4c\x67\x6c\xa0\x34\xbb\x0d\x9e\x0f\x59\x87\xe9\x60\xe9\xc4\x4d\xf8\x57\xb1\x4d\x64\x56\x83\xe4\x30\x56\x17\x8c\x22\x8f\xb6\x61\xda\xea\x29\xb8\x77\x39\x44\xc6\x7e\xf5\x8f\x2b\x29\x1e\xd7\xc1\x23\x7c\xb7\x1a\x65\xc4\x2e\x24\x7e\x49\x78\x97\x74\x79\xa6\x30\x24\xc5\xb7\xaf\x4c\x31\x4e\x6a\xd1\x76\x4e\xd5\x32\xee\x6f\x32\x93\xc1\xd8\x83\x66\x62\x1e\x4a\x3d\xa7\xf4\x4c\xd4\xda\x81\xc0\x05\x6d\xf8\x66\x9b\x75\x3b\xf2\x25\x83\x80\xf7\x43\x18\x75\xd2\xc5\x06\x5d\x33\x76\xcd\xbe\x93\x6b\xd2\x0a\x67\x3e\xfc\xb6\x9a\x1b\xe2\x6b\x34\x8a\x90\x7d\x40\x84\x14\x20\x65\x96\x4d\xa5\x25\xf8\xd3\xed\xc3\x5f\x17\xe3\xd4\xc0\x1f\x72\x7f\x80\x1e\x5a\x9d\x3b\x5d\x80\xa0\x88\x44\x55\xa0\xa8\x93\x4f\x4f\x4f\x92\xe2\xc2\x7f\x3e\xc4\x5d\x78\x64\xc6\xcd\x38\xe3\x03\xe2\x57\x63\x98\x8c\x12\xec\x49\x79\xea\x53\x85\x67\xbe\x32\xbd\xcb\x6e\x91\xd8\x4e\xe7\x2b\xb9\xc5\x33\x46\x21\xf3\x5c\x1d\x42\xc6\xae\xe8\xc3\xf6\x80\xbe\x4c\x30\x9c\xed\x59\x75\x96\x27\xbd\xf1\x6b\xf1\xc7\x36\x1b\xcb\x5d\xc8\x9d\xf4\x6e\xbb\xa8\x83\x6f\x2b\x53\xb9\x85\x9f\xb0\xda\xfd\x06\xa3\x73\x36\x95\x78\x80\x98\x76\x8d\xb2\x40\x8b\x67\xdf\x19\x2c\x49\xc3\x0d\x7b\x41\x49\x78\x6f\x3b\xd2\x94\x4d\x65\x45\x9f\xfe\xff\x4d\xe6\xf0\xe3\x9b\x33\x30\x15\xd3\x3c\x40\x5e\x69\x64\xbb\xcd\xe8\x02\x00\x13\x96\x91\x7b\xa8\x5a\x09\x82\x54\xd9\x77\xfe\xa4\xbf\x3d\x0b\x7c\x69\x71\x5b\x1a\x7e\xbe\x6a\xc3\x47\x30\x0a\xfe\x07\x46\x9f\xf1\x34\x97\x1c\x25\xdc\xfc\xd4\xbf\x37\xb5\xb6\xf6\x1a\x02\x8e\xb3\x29\xca\xa2\x76\x9f\x41\x9c\x55\x47\x6c\x13\x0c\x4e\x2a\x96\x04\x64\xa8\xdc\x45\x07\x63\x76\x5d\x52\xd7\x9f\xf2\x9c\xd2\xb8\x40\x27\xc5\x31\x01\x8e\xed\x41\x64\x47\xb9\x4e\xcd\xbe\x56\xa5\x9b\xfb\x3e\x7a\xe9\x75\xd7\x4e\x5b\xed\xc8\x8b\x9d\xf8\x99\x9d\x16\x2e\xf0\x98\x37\xc6\xe1\x67\x6e\xf4\xd9\xb1\x6f\x3a\x07\xc2\xbd\xf6\xe6\x48\x05\x49\x79\x3a\x47\x12\x9c\x29\xc8\xef\x9c\x34\x74\xbf\xd2\xcc\x91\x0c\xc9\x7c\xac\x57\x4c\xc0\x31\xf4\x39\x3a\xa6\x0c\xc7\x24\xcf\xeb\x43\x60\x6c\x88\xbf\xde\xb1\x3a\x32\x29\xff\xe4\x83\x61\x4a\x09\xd9\x90\xcb\x40\x74\xe2\x14\x9c\x7c\xca\x66\xcb\xe0\x44\x86\x8a\xb3\x5d\x9d\x32\x7d\x0e\xf8\x52\xec\x08\x67\x1e\xcf\x96\x97\x76\x67\x55\x83\x98\x7f\xfa\xd3\x06\xea\xa1\xa5\xd3\x7f\x45\xb9\x79\x66\xf5\xdd\x97\xf0\x73\x37\xbb\x2d\xa9\xcc\xda\x25\x81\xd1\x3f\xeb\xca\xe8\xe9\xd2\xaf\xf7\xb6\x35\xdd\xdd\xd0\xb0\xc8\xcc\x63\x04\x7c\xe1\xb2\xe3\x3c\x8a\xca\x58\x3c\xfc\xe9\x05\x4c\x0b\xc3\x02\x88\x1a\x53\xb0\xf6\xb3\xec\x1c\x94\xae\x0c\x7b\x34\xf6\x73\x31\x9e\xc1\xba\x69\x5a\x10\x5b\xba\xcc\xdd\xc1\x36\x87\xcf\x61\xae\x58\x4c\xcd\x00\xf9\x78\x95\x43\x5e\x7e\x3c\xc6\x31\x27\x87\xe7\x74\x02\x37\xee\x15\x84\x89\x27\xf0\x17\x30\x61\x18\x0c\x13\x37\x3f\x90\xe9\x06\x0c\x8f\x49\xd3\x3d\xc1\x3f\x01\x00\x00\xff\xff\xb8\x1b\x77\xad\x8a\x16\x00\x00")

func lispbootBootLispBytes() ([]byte, error) {
	return bindataRead(
		_lispbootBootLisp,
		"lispboot/boot.lisp",
	)
}

func lispbootBootLisp() (*asset, error) {
	bytes, err := lispbootBootLispBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lispboot/boot.lisp", size: 5770, mode: os.FileMode(420), modTime: time.Unix(1487764111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lispboot/boot.lisp": lispbootBootLisp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lispboot": &bintree{nil, map[string]*bintree{
		"boot.lisp": &bintree{lispbootBootLisp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

